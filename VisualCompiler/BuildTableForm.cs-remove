using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace VisualCompiler
{
    public partial class BuildTableFormx : Form
    {
        static private BuildTableFormx general;
    //    static private Form2 CDUForm;
        static public BuildTableFormx enterAction;

        static private BuildTable buildTable;
  //      static private OFP ofp;

        public string actionName = "";
        public bool actionNameAvailable = false;

        public enum Modes
        {
            BuildTable, // build the table of key, page, action names
            OFP         // forward CDU keys with displayed page to OFP
        }

        public enum Page
        { // a small portion of possible CDU pages to be displayed
            DC = 0,  // Don't care
            DATA,
            DIR,
            FLIGHTPLAN,
            INIT,
            PERF,
            PROG
        } // end enum Page

        public enum Key
        { // the line select keys and a portion of the other non-alphanumeric keys
            LSKL1,
            LSKL2,
            LSKL3,
            LSKL4,
            LSKL5,
            LSKL6,
            LSKR1,
            LSKR2,
            LSKR3,
            LSKR4,
            LSKR5,
            LSKR6,
            DATA,
            DIR,
            FLIGHTPLAN,
            INIT,
            PERF,
            PROG,
            PREV,
            NEXT,
            UP,
            DOWN
        } // end enum Key

        private Page[] pageArray = new Page[7];

        public Page selectedPage;
        private Panel CDUPanel;
        private Button DATA;
        private Button INIT;
        private Button PROG;
        private Button PERF;
        private Button DOWN;
        private Button UP;
        private Button NEXT;
        private Button PREV;
        private Button FPLAN;
        private Button DIR;
        private Button LSKR6;
        private Button LSKR5;
        private Button LSKR4;
        private Button LSKR3;
        private Button LSKR2;
        private Button LSKR1;
        private Button LSKL6;
        private Button LSKL5;
        private Button LSKL4;
        private Button LSKL3;
        private Button LSKL2;
        private Button LSKL1;
        private Panel DisplayPanel;
 //       private Label DisplayLabel;

        public Modes Mode = Modes.BuildTable;

        public BuildTableFormx()
        {
            InitializeComponent();
    //        CDUForm = this;
            general = this; // buildTableForm;
            enterAction = this; // buildTableForm;
 //           buildTable = new BuildTable(general) ; //, CDUForm);
        //    ofp = new OFP(buildTable);

            // Set array of pages
            pageArray[0] = Page.DC;
            pageArray[1] = Page.DATA;
            pageArray[2] = Page.DIR;
            pageArray[3] = Page.FLIGHTPLAN;
            pageArray[4] = Page.INIT;
            pageArray[5] = Page.PERF;
            pageArray[6] = Page.PROG;

            // Set string values of the pages as well as mode
   //         for (int p = 1; p <= 6; p++)
   //         {
   //             Page page;
   //             page = pageArray[p];
   //             pageNameList.Items.Add(page.ToString());
   //             CurrentMode.Text = Mode.ToString();
   //         }
        } // end constructor

        // Clear the action name from the text box
   //     public void ActionNameClear()
   //     {
   //         ActionNameText.Clear();
   //     } // end ActionNameClear

        public bool CheckGeneralKey(Key key)
        {
            if ((key == Key.DATA) || (key == Key.DIR) || (key == Key.FLIGHTPLAN) ||
                (key == Key.INIT) || (key == Key.PERF) || (key == Key.PROG) ||
                (key == Key.PREV) || (key == Key.NEXT) || (key == Key.UP) ||
                (key == Key.DOWN))
            { return true; }
            else
            { return false; }
        } // end CheckGeneralKey
 
  //      public void DisplayTitle(string text)
  //      {
  //          DisplayLabel.Text = text;
  //      } // end DisplayTitle

        // This method is to react to a key push in either mode
        private void React(Key key) //, Form1.Page page)
        {
            if (general.Mode == BuildTableFormx.Modes.BuildTable)
            {
                // Add the key, page, action combination to the table
                buildTable.AddToTable(key, selectedPage);
            }
            else
            {
                // Lookup the action in the table and invoke it
                TreatKey(key, selectedPage); 
            }
        } // end React

        // This method is to send the pushed key and the displayed page 
        // to the OFP
        public void TreatKey(Key key, Page page)
        {
        } // end TreatKey

        //**********************************************************************
        // Beginning of event handlers

        // Enter the name of an action to use with the page and CDU key
  //      private void ActionNameText_KeyUp(object sender, KeyEventArgs e)
  //      {
  //          actionName = "";
  //          actionNameAvailable = false;
  //          if (e.KeyCode == Keys.Return)
  //          {
  //              actionName = ActionNameText.Text.Substring(
  //                               0, ActionNameText.Text.Length);
  //              actionNameAvailable = true;
  //          }
  //      } // end ActionNameText_KeyUp

  //      private void ActionNameText_TextChanged(object sender, EventArgs e)
  //      {
            // unused
  //      } // ActionNameText_TextChanged

        // Switch the operational mode and, if now OFP, send the table to the OFP
  //      private void ModeButton_Click(object sender, EventArgs e)
  //      {
  //          if (Mode == Modes.BuildTable)
  //          {
  //              // Switch to OFP
  //              Mode = Modes.OFP;

                // Send the table to the OFP
                //>>>> add code
  //          }
  //          else
  //          {
                // Switch back to BuildTable
  //              Mode = Modes.BuildTable;
  //          }
  //          CurrentMode.Text = Mode.ToString();

  //      } // end ModeButton_Click

        // Select the page being displayed on the CDU
        private void pageNameList_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selected = pageNameList.SelectedItem.ToString();
            int index = pageNameList.FindString(selected);
            selectedPage = pageArray[index + 1];
            DisplayTitle(selected);

        } // end pageNameList_SelectedIndexChanged

        // These event handlers all invoke the React method to allow a common
        // method to determine whether in the build table mode or the OFP mode.
        // This allows a common form to be used to interpret the button push
        // as from the visual compiler / table builder or from the OFP using
        // the created table.
        private void LSKL1_Click(object sender, EventArgs e)
        {
            React(Key.LSKL1); 
        }

        private void LSKL2_Click(object sender, EventArgs e)
        {
            React(Key.LSKL2); 
        }

        private void LSKL3_Click(object sender, EventArgs e)
        {
            React(Key.LSKL3); 
        }

        private void LSKL4_Click(object sender, EventArgs e)
        {
            React(Key.LSKL4); 
        }

        private void LSKL5_Click(object sender, EventArgs e)
        {
            React(Key.LSKL5); 
        }

        private void LSKL6_Click(object sender, EventArgs e)
        {
            React(Key.LSKL6); 
        }

        private void LSKR1_Click(object sender, EventArgs e)
        {
            React(Key.LSKR1); 
        }

        private void LSKR2_Click(object sender, EventArgs e)
        {
            React(Key.LSKR2); 
        }

        private void LSKR3_Click(object sender, EventArgs e)
        {
            React(Key.LSKR3); 
        }

        private void LSKR4_Click(object sender, EventArgs e)
        {
            React(Key.LSKR4); 
        }

        private void LSKR5_Click(object sender, EventArgs e)
        {
            React(Key.LSKR5); 
        }

        private void LSKR6_Click(object sender, EventArgs e)
        {
            React(Key.LSKR6); 
        }

        private void DIR_Click(object sender, EventArgs e)
        {
            React(Key.DIR); 
        }

        private void PROG_Click(object sender, EventArgs e)
        {
            React(Key.PROG);
        }

        private void PERF_Click(object sender, EventArgs e)
        {
            React(Key.PERF); 
        }

        private void INIT_Click(object sender, EventArgs e)
        {
            React(Key.INIT); 
        }

        private void DATA_Click(object sender, EventArgs e)
        {
            React(Key.DATA); 
        }

        private void FPLAN_Click(object sender, EventArgs e)
        {
            React(Key.FLIGHTPLAN); 
        }

        private void PREV_Click(object sender, EventArgs e)
        {
            React(Key.PREV); 
        }

        private void NEXT_Click(object sender, EventArgs e)
        {
            React(Key.NEXT); 
        }

        private void UP_Click(object sender, EventArgs e)
        {
            React(Key.UP); 
        }

        private void DOWN_Click(object sender, EventArgs e)
        {
            React(Key.DOWN); 
        }

        private void InitializeComponent()
        {
            this.CDUPanel = new System.Windows.Forms.Panel();
            this.DATA = new System.Windows.Forms.Button();
            this.INIT = new System.Windows.Forms.Button();
            this.PROG = new System.Windows.Forms.Button();
            this.PERF = new System.Windows.Forms.Button();
            this.DOWN = new System.Windows.Forms.Button();
            this.UP = new System.Windows.Forms.Button();
            this.NEXT = new System.Windows.Forms.Button();
            this.PREV = new System.Windows.Forms.Button();
            this.FPLAN = new System.Windows.Forms.Button();
            this.DIR = new System.Windows.Forms.Button();
            this.LSKR6 = new System.Windows.Forms.Button();
            this.LSKR5 = new System.Windows.Forms.Button();
            this.LSKR4 = new System.Windows.Forms.Button();
            this.LSKR3 = new System.Windows.Forms.Button();
            this.LSKR2 = new System.Windows.Forms.Button();
            this.LSKR1 = new System.Windows.Forms.Button();
            this.LSKL6 = new System.Windows.Forms.Button();
            this.LSKL5 = new System.Windows.Forms.Button();
            this.LSKL4 = new System.Windows.Forms.Button();
            this.LSKL3 = new System.Windows.Forms.Button();
            this.LSKL2 = new System.Windows.Forms.Button();
            this.LSKL1 = new System.Windows.Forms.Button();
            this.DisplayPanel = new System.Windows.Forms.Panel();
            this.SuspendLayout();
            this.ResumeLayout(false);

        }

        private void LSKL1_Click_1(object sender, EventArgs e)
        {

        }

  //      private void InitializeComponent()
  //      {
  //          this.SuspendLayout();
            // 
            // BuildTableForm
            // 
  //          this.ClientSize = new System.Drawing.Size(826, 500);
  //          this.Name = "BuildTableForm";
  //          this.ResumeLayout(false);

  //      }

    }
}
